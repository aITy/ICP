user input
  new game
    lokalni
      human vs AI + vyber barvy
      human vs human + vyber barvy
    vzdalena
      iniciator nabizi zalezeni hry (IP + port)
        druha strana musi nabidku akceptovat
      iniciator vybere new_game nebo load_game a barvu (cerna/bila)
        druha strana to musi akceptovat
        pokud nebude souhlasit zadne ze jmen v load_game s aktualnim
          nickem, tak se to musi uzivatele zeptat, za ktereho z tech 2
          z load_game se bude vydavat
      kdokoliv z obou muze kdykoliv ukladat a ukoncit partii
  load_game (ze souboru nebo uzivatelsky_textovy_vstup)
    play/pause (pokracovani ve hre...)
    replay
      stepping (jmp beginning/end/previous/next)
      auto (with some delay)
  move (kontrola, zdali muze vubec byt tah proveden a informovani hrace o chybe)
    zkusit udelat reverzibilni prirustky
  exit_game (== save_game + zavreni_tabu_s_hracim_polem)
  save_game (dialog na vyber souboru)
  jmena hracu (nepovinne, ale menitelne; i pro AI mozne zmenit)

partie mohou byt hrany/prehravany soucasne (treba v tabech)!
  tzn. asi samostatny objekt "game"

protokol
  A: INVITE port_of_server nick1_optionally_with_spaces
  B: INVITE_ACCEPT nick2
     INVITE_REJECT
  A: GAME black|white new
     GAME black|white load xml_string_s_loadovanou_hrou
     # tak dlouho, dokud nektery neodpovi GAME_ACCEPT/GAME_REJECT/EXIT
  B: GAME_ACCEPT
     GAME_REJECT
  A/B: MOVE XY_old XY_new
  A/B: EXIT

XML (musi zachovavat poradi pri parsovani!)
  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  <!-- standalone because we have no DTD for it -->
  <draughts version="1.0">
    <game type="network/local" host="hostname/IPv4/IPv6" port="15646">
    <players>
      <black>Alias 1</black>
      <white>Alias 2</white>
    </players>
    <moves>
      <move srcx="3" srcy="4" dstx="4" dsty="3" kickedx="4" kickedy="5" kicked="white"      became-a-king="false">
      <move srcx="3" srcy="5" dstx="5" dsty="3" kickedx="3" kickedy="7" kicked="black"      became-a-king="false">
      <move srcx="5" srcy="1" dstx="1" dsty="5" kickedx="2" kickedy="6" kicked="none"       became-a-king="false">
      <move srcx="7" srcy="3" dstx="3" dsty="7" kickedx="3" kickedy="4" kicked="white_king" became-a-king="false">
      <move srcx="6" srcy="2" dstx="2" dsty="6" kickedx="3" kickedy="3" kicked="none"       became-a-king="false">
      <move srcx="4" srcy="6" dstx="6" dsty="4" kickedx="5" kickedy="3" kicked="black"      became-a-king="false">
      <move srcx="3" srcy="4" dstx="4" dsty="3" kickedx="7" kickedy="5" kicked="white"      became-a-king="false">
      <move srcx="3" srcy="5" dstx="5" dsty="3" kickedx="6" kickedy="7" kicked="black"      became-a-king="false">
      <move srcx="5" srcy="1" dstx="1" dsty="5" kickedx="4" kickedy="6" kicked="none"       became-a-king="true">
      <move srcx="7" srcy="3" dstx="3" dsty="7" kickedx="1" kickedy="4" kicked="none"       became-a-king="false">
      <move srcx="4" srcy="6" dstx="6" dsty="4" kickedx="0" kickedy="6" kicked="black_king" became-a-king="true">
    </moves>
  </draughts>

server
  http://doc.trolltech.com/4.3/network-fortuneserver.html
  Qt sockets APIs could make connections some different, but the basis of
    creating a server are:
  1.Create a socket.
  2.Make socket listen to certain port.
  3.Wait new client request.
  4.Make socket copy for the new client.
  At this point, there are various ways to performing read/write tasks to
    new socket: forking process, threads or just use SIGNAL/SLOT. Be carefull,
    SIGNALS doesn't says to SLOTS the socket in use. So, if you have some
    state dependent to socket, you will be in trouble. You shall connect any
    socket signal to a different slot. Easy to do with classes.
  As you can see in step 4, you make a copy of incoming connections socket.
    So, you won't use it to read/write data and will keep waiting for next
    conection.

client
  vzdy vytvori novy socket na nahodnem portu a pres ten kontaktuje server

vim: set ft=dosbatch autoindent:
